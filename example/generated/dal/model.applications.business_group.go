// DO NOT EDIT THIS FILE, IT IS GENERATED BY DALC
package dal

import (
	"context"
	"database/sql"
	"github.com/pharosnet/dalc/v2"
	"time"
)

const (
	businessGroupRowGetByPkSQL = "SELECT `ID`, `CREATE_BY`, `CREATE_AT`, `MODIFY_BY`, `MODIFY_AT`, `DELETE_BY`, `DELETE_AT`, `VERSION`, `CODE`, `NAME`, `DESCRIPTION`FROM `APPLICATIONS`.`BUSINESS_GROUP` WHERE `ID` = ?"
	businessGroupRowInsertSQL  = "INSERT INTO `APPLICATIONS`.`BUSINESS_GROUP` ( `ID`, `CREATE_BY`, `CREATE_AT`, `MODIFY_BY`, `MODIFY_AT`, `DELETE_BY`, `DELETE_AT`, `VERSION`, `CODE`, `NAME`, `DESCRIPTION`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
	businessGroupRowUpdateSQL  = "UPDATE `APPLICATIONS`.`BUSINESS_GROUP` SET `CREATE_BY` = ?, `CREATE_AT` = ?, `MODIFY_BY` = ?, `MODIFY_AT` = ?, `DELETE_BY` = ?, `DELETE_AT` = ?, `VERSION` = ?, `CODE` = ?, `NAME` = ?, `DESCRIPTION` = ? WHERE `ID` = ?"
	businessGroupRowDeleteSQL  = "DELETE FROM `APPLICATIONS`.`BUSINESS_GROUP` WHERE `ID` = ?"
)

type BusinessGroupRow struct {
	Id          string    `json:"id"`
	CreateBy    string    `json:"create_by"`
	CreateAt    time.Time `json:"create_at"`
	ModifyBy    string    `json:"modify_by"`
	ModifyAt    time.Time `json:"modify_at"`
	DeleteBy    string    `json:"delete_by"`
	DeleteAt    time.Time `json:"delete_at"`
	Version     int64     `json:"version"`
	Code        string    `json:"code"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (row *BusinessGroupRow) scanSQLRow(rows *sql.Rows) (err error) {
	err = rows.Scan(
		&row.Id,
		&row.CreateBy,
		&row.CreateAt,
		&row.ModifyBy,
		&row.ModifyAt,
		&row.DeleteBy,
		&row.DeleteAt,
		&row.Version,
		&row.Code,
		&row.Name,
		&row.Description,
	)
	return
}

func (row *BusinessGroupRow) conventToGetArgs() (args *dalc.Args) {

	args = dalc.NewArgs()
	args.Arg(row.Id)

	return
}

func (row *BusinessGroupRow) Get(ctx dalc.PreparedContext) (err error) {
	err = dalc.Query(ctx, businessGroupRowGetByPkSQL, row.conventToGetArgs(), func(ctx context.Context, rows *sql.Rows, rowErr error) (err error) {
		if rowErr != nil {
			err = rowErr
			return
		}
		err = row.scanSQLRow(rows)
		return
	})
	return
}

func (row *BusinessGroupRow) conventToInsertArgs() (args *dalc.Args) {

	args = dalc.NewArgs()
	args.Arg(row.Id)
	args.Arg(row.CreateBy)
	args.Arg(row.CreateAt)
	args.Arg(row.ModifyBy)
	args.Arg(row.ModifyAt)
	args.Arg(row.DeleteBy)
	args.Arg(row.DeleteAt)
	args.Arg(row.Version)
	args.Arg(row.Code)
	args.Arg(row.Name)
	args.Arg(row.Description)

	return
}

func (row *BusinessGroupRow) Insert(ctx dalc.PreparedContext) (err error) {

	_, execErr := dalc.Execute(ctx, businessGroupRowInsertSQL, row.conventToInsertArgs())
	if execErr != nil {
		err = execErr
		return
	}

	return
}

func (row *BusinessGroupRow) conventToUpdateArgs() (args *dalc.Args) {

	args = dalc.NewArgs()

	args.Arg(row.CreateBy)
	args.Arg(row.CreateAt)
	args.Arg(row.ModifyBy)
	args.Arg(row.ModifyAt)
	args.Arg(row.DeleteBy)
	args.Arg(row.DeleteAt)
	args.Arg(row.Version)
	args.Arg(row.Code)
	args.Arg(row.Name)
	args.Arg(row.Description)

	args.Arg(row.Id)

	return
}

func (row *BusinessGroupRow) Update(ctx dalc.PreparedContext) (err error) {
	_, execErr := dalc.Execute(ctx, businessGroupRowUpdateSQL, row.conventToUpdateArgs())
	if execErr != nil {
		err = execErr
		return
	}
	return
}

func (row *BusinessGroupRow) conventToDeleteArgs() (args *dalc.Args) {

	args = dalc.NewArgs()
	args.Arg(row.Id)

	return
}

func (row *BusinessGroupRow) Delete(ctx dalc.PreparedContext) (err error) {
	_, execErr := dalc.Execute(ctx, businessGroupRowDeleteSQL, row.conventToDeleteArgs())
	if execErr != nil {
		err = execErr
		return
	}
	return
}
